{"version":3,"sources":["webpack:///./node_modules/@globile/card-management/fesm2015/globile-card-management.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACE;AACgB;AACC;AACsC;AACkB;;AAExH;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,kCAAkC,YAAY,qBAAqB,6BAA6B,0BAA0B,yBAAyB,wBAAwB,sBAAsB,eAAe;AAChN,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,8DAAc,EAAE;AAC5B,KAAK,OAAO,wEAAe,EAAE;AAC7B,KAAK,OAAO,8EAAqB,EAAE;AACnC,KAAK,OAAO,2EAAkB;AAC9B;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,OAAO,wEAAe;AAC3B;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,8DAAc,EAAE;AAC5B,KAAK,OAAO,wEAAe,EAAE;AAC7B,KAAK,OAAO,8EAAqB;AACjC;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,OAAO,wEAAe;AAC3B;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,oBAAoB,4DAAY;AAChC;AACA,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAY;AAChC,oBAAoB,0DAAW;AAC/B,oBAAoB,0DAAY;AAChC,oBAAoB,wDAAU;AAC9B,oBAAoB,8DAAgB;AACpC,oBAAoB,wDAAU;AAC9B;AACA,oBAAoB,+DAAiB;AACrC,oBAAoB,0DAAY;AAChC;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAE0L;;AAE1L,mD","file":"2.js","sourcesContent":["import { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, RouterModule } from '@angular/router';\nimport { Component, Injectable, NgModule } from '@angular/core';\nimport { CardsApiService, CardsCommonService, BridgeAnalyticService } from '@globile/mobile-services';\nimport { SliderModule, CardModule, IconModule, SlideToggleModule, LoaderModule, OptionListModule } from 'sn-common-lib';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANALYTIC_TITLE = 'card-management';\nclass CardManagementComponent {\n    /**\n     * @param {?} route\n     * @param {?} api\n     * @param {?} analytic\n     * @param {?} common\n     */\n    constructor(route, api, analytic, common) {\n        this.route = route;\n        this.api = api;\n        this.analytic = analytic;\n        this.common = common;\n        this.cards = this.route.snapshot.data.cards.cards || [];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const view = {\n            title: ANALYTIC_TITLE, data: { event: 'init' }\n        };\n        this.analytic.sendView(view);\n        this.startIndex = this.findStartIndex();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    findStartIndex() {\n        if (this.route.snapshot.paramMap.has('id') && this.cards.length) {\n            /** @type {?} */\n            const cardId = this.route.snapshot.paramMap.get('id');\n            /** @type {?} */\n            const result = this.cards ? this.cards.findIndex((/**\n             * @param {?} card\n             * @return {?}\n             */\n            (card) => card.cardId === cardId)) : 0;\n            return (result < 0) ? 0 : result;\n        }\n        return 0;\n    }\n    /**\n     * @param {?} card\n     * @return {?}\n     */\n    cardSelected(card) {\n        this.activeCard = card;\n        this.common.setSelectedCardId(card.cardId);\n    }\n    /**\n     * @return {?}\n     */\n    cardLock() {\n        /** @type {?} */\n        const event = {\n            title: ANALYTIC_TITLE,\n            data: {\n                event: 'freeze card',\n                card: this.activeCard.cardId,\n                newStatus: '' + !this.activeCard.locked\n            }\n        };\n        this.analytic.sendEvent(event);\n        this.isLoading = true;\n        this.$cardUpdateLock = this.api.setLockStatus(this.activeCard.cardId, !this.activeCard.locked)\n            .subscribe((/**\n         * @param {?} resp\n         * @return {?}\n         */\n        (resp) => {\n            this.activeCard.locked = resp && resp.isLocked;\n        }), (/**\n         * @return {?}\n         */\n        () => {\n            this.isLoading = false;\n        }), (/**\n         * @return {?}\n         */\n        () => {\n            this.isLoading = false;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get freezeOptionSubtitle() {\n        return this.activeCard.locked ? 'Tap again to unfreeze' : 'Tap to freeze';\n    }\n    /**\n     * @return {?}\n     */\n    get freezeOptionTitle() {\n        return this.activeCard.locked ? 'Unfreeze card' : 'Freeze card';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.$cardUpdateLock && !this.$cardUpdateLock.closed) {\n            this.$cardUpdateLock.unsubscribe();\n        }\n    }\n}\nCardManagementComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'sn-card-management',\n                template: \"<div class=\\\"container-fluid p-0\\\">\\n  <sn-slider [value]=\\\"cards\\\" (onChange)=\\\"cardSelected($event)\\\" [startIndex]=\\\"startIndex\\\">\\n    <ng-container *ngFor=\\\"let card of cards\\\">\\n      <ng-template #slide>\\n        <sn-card [type]=\\\"card.type\\\" [blocked]=\\\"card.locked\\\" [available]=\\\"card.creditData.availableBalance.amount\\\"\\n          [currency]=\\\"card.creditData.availableBalance.currencyCode\\\" [account]=\\\"card.displayNumber\\\"></sn-card>\\n      </ng-template>\\n    </ng-container>\\n  </sn-slider>\\n\\n  <sn-option-list *ngIf=\\\"activeCard\\\">\\n\\n    <sn-option-item *ngIf=\\\"!activeCard.locked\\\">\\n\\n      <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-FUNC041\\\"></sn-icon>\\n\\n      <div class=\\\"Type-5_Regular-Style \\\">View PIN</div>\\n      <div class=\\\"Type-5_Light-Style\\\">Check you PIN</div>\\n\\n    </sn-option-item>\\n\\n    <sn-option-item (click)=\\\"cardLock()\\\">\\n      <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-FUNC011\\\"></sn-icon>\\n      <div class=\\\"Type-5_Regular-Style\\\" [textContent]=\\\"freezeOptionTitle\\\"></div>\\n      <div class=\\\"Type-5_Light-Style\\\" [textContent]=\\\"freezeOptionSubtitle\\\"></div>\\n    </sn-option-item>\\n\\n    <sn-option-item *ngIf=\\\"!activeCard.locked\\\">\\n      <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-SERV036\\\"></sn-icon>\\n      <div class=\\\"Type-5_Regular-Style \\\">Block PIN</div>\\n      <div class=\\\"Type-5_Light-Style\\\">Use after exceeding 3 tries</div>\\n    </sn-option-item>\\n\\n    <sn-option-item *ngIf=\\\"!activeCard.locked\\\" [routerLink]=\\\"['security']\\\">\\n\\n      <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-SERV079\\\"></sn-icon>\\n\\n      <div class=\\\"Type-5_Regular-Style \\\">Security</div>\\n      <div class=\\\"Type-5_Light-Style\\\">Enable additional protection</div>\\n\\n    </sn-option-item>\\n\\n    <sn-option-item *ngIf=\\\"!activeCard.locked\\\">\\n\\n      <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-CHAN001\\\"></sn-icon>\\n\\n      <div class=\\\"Type-5_Regular-Style \\\">Limit</div>\\n      <div class=\\\"Type-5_Light-Style\\\">Set monthly spending amount</div>\\n\\n    </sn-option-item>\\n\\n    <sn-option-item *ngIf=\\\"activeCard.locked\\\">\\n\\n      <sn-icon sn-color=\\\"--santan_turqoise\\\" icon=\\\"sn-BAN027\\\"></sn-icon>\\n\\n      <div class=\\\"Type-5_Regular-Style \\\">Report lost or stolen</div>\\n      <div class=\\\"Type-5_Light-Style\\\">This card will be deactivated</div>\\n\\n    </sn-option-item>\\n\\n  </sn-option-list>\\n  <sn-loader *ngIf=\\\"isLoading\\\"></sn-loader>\\n</div>\",\n                styles: [\"sn-card{margin:auto;transform:scale(.86);-webkit-transform:scale(.86);-moz-transform:scale(.86);-ms-transform:scale(.86);-o-transform:scale(.86)}.Type-5_Regular-Style{font-size:16px}\"]\n            }] }\n];\n/** @nocollapse */\nCardManagementComponent.ctorParameters = () => [\n    { type: ActivatedRoute },\n    { type: CardsApiService },\n    { type: BridgeAnalyticService },\n    { type: CardsCommonService }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CardsManagementResolver {\n    /**\n     * @param {?} cardsServie\n     */\n    constructor(cardsServie) {\n        this.cardsServie = cardsServie;\n    }\n    /**\n     * @return {?}\n     */\n    resolve() {\n        return this.cardsServie.loadCards();\n    }\n}\nCardsManagementResolver.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nCardsManagementResolver.ctorParameters = () => [\n    { type: CardsApiService }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANALYTIC_TITLE$1 = 'card-management-security';\nclass CardSecurityComponent {\n    /**\n     * @param {?} route\n     * @param {?} cardsService\n     * @param {?} analytic\n     */\n    constructor(route, cardsService, analytic) {\n        this.route = route;\n        this.cardsService = cardsService;\n        this.analytic = analytic;\n        this.cardDetails = this.route.snapshot.data.hasOwnProperty('details') && this.route.snapshot.data.details;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const view = {\n            title: ANALYTIC_TITLE$1, data: { event: 'init' }\n        };\n        this.analytic.sendView(view);\n    }\n    /**\n     * @param {?=} allowInternational\n     * @param {?=} allowInternet\n     * @param {?=} contactlessEnabled\n     * @param {?=} dailyLimit\n     * @param {?=} weeklyLimit\n     * @return {?}\n     */\n    securityChange(allowInternational, allowInternet, contactlessEnabled, dailyLimit, weeklyLimit) {\n        this.isLoading = true;\n        /** @type {?} */\n        const cardid = this.cardDetails.basicData && this.cardDetails.basicData.cardId;\n        /** @type {?} */\n        const event = {\n            title: ANALYTIC_TITLE$1,\n            data: {\n                event: 'freeze card',\n                card: cardid,\n                newStatus: JSON.stringify({\n                    'allowInternational': allowInternational,\n                    'allowInternet': allowInternet,\n                    'contactlessEnabled': contactlessEnabled,\n                    'dailyLimit': dailyLimit,\n                    'weeklyLimit': weeklyLimit\n                })\n            }\n        };\n        this.analytic.sendEvent(event);\n        this.cardsService.setConfiguration(cardid, {\n            allowInternet,\n            allowInternational,\n            contactlessEnabled,\n            dailyLimit,\n            weeklyLimit\n        }).subscribe((/**\n         * @return {?}\n         */\n        () => { }), (/**\n         * @return {?}\n         */\n        () => {\n            this.isLoading = false;\n        }), (/**\n         * @return {?}\n         */\n        () => {\n            this.isLoading = false;\n        }));\n    }\n}\nCardSecurityComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'sn-security',\n                template: \"<sn-option-list>\\n  <sn-option-item>\\n\\n    <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-BAN083\\\"></sn-icon>\\n\\n    <div class=\\\"Type-5_Regular-Style \\\">Location-based security</div>\\n    <div class=\\\"Type-5_Light-Style\\\">Using your location we could prevent fraudulent transactions.</div>\\n\\n    <sn-slide-toggle></sn-slide-toggle>\\n\\n  </sn-option-item>\\n\\n  <sn-option-item>\\n\\n    <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-BAN018\\\"></sn-icon>\\n\\n    <div class=\\\"Type-5_Regular-Style\\\">ATM withdrawals</div>\\n    <div class=\\\"Type-5_Light-Style\\\">If you did not plan to pay withdraw cash. Switch ATM withdrawals off</div>\\n\\n    <sn-slide-toggle></sn-slide-toggle>\\n\\n  </sn-option-item>\\n\\n  <sn-option-item>\\n\\n\\n    <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-CHAN056\\\"></sn-icon>\\n\\n    <div class=\\\"Type-5_Regular-Style \\\">Online transactions</div>\\n    <div class=\\\"Type-5_Light-Style\\\">Switch off Internet-based transactions for extra security</div>\\n\\n    <sn-slide-toggle [ngModel]=\\\"cardDetails?.configuration?.allowInternet\\\" (change)=\\\"securityChange(undefined,$event)\\\">\\n    </sn-slide-toggle>\\n\\n  </sn-option-item>\\n\\n  <sn-option-item>\\n\\n    <sn-icon sn-color=\\\"--santan_red\\\" icon=\\\"sn-BAN100\\\"></sn-icon>\\n\\n    <div class=\\\"Type-5_Regular-Style \\\">Contactless payments</div>\\n    <div class=\\\"Type-5_Light-Style\\\">Switch contactless for extra security</div>\\n\\n    <sn-slide-toggle [ngModel]=\\\"cardDetails?.configuration?.contactlessEnabled\\\"\\n      (change)=\\\"securityChange(undefined ,undefined, $event)\\\"></sn-slide-toggle>\\n\\n  </sn-option-item>\\n\\n</sn-option-list>\\n\\n<sn-loader *ngIf=\\\"isLoading\\\"></sn-loader>\",\n                styles: [\"\"]\n            }] }\n];\n/** @nocollapse */\nCardSecurityComponent.ctorParameters = () => [\n    { type: ActivatedRoute },\n    { type: CardsApiService },\n    { type: BridgeAnalyticService }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CardSecurityResolver {\n    /**\n     * @param {?} cardsService\n     */\n    constructor(cardsService) {\n        this.cardsService = cardsService;\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    resolve(route) {\n        /** @type {?} */\n        const cardId = route.paramMap.has('id') && route.paramMap.get('id');\n        return this.cardsService.getCardDetails(cardId);\n    }\n}\nCardSecurityResolver.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nCardSecurityResolver.ctorParameters = () => [\n    { type: CardsApiService }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst routes = [\n    {\n        path: '',\n        component: CardManagementComponent,\n        resolve: {\n            cards: CardsManagementResolver\n        }\n    },\n    {\n        path: ':id',\n        component: CardManagementComponent,\n        resolve: {\n            cards: CardsManagementResolver\n        }\n    },\n    {\n        path: ':id/security',\n        component: CardSecurityComponent,\n        resolve: {\n            details: CardSecurityResolver\n        }\n    },\n    {\n        path: '**',\n        redirectTo: ''\n    }\n];\nclass CardManagementRoutingModule {\n}\nCardManagementRoutingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    RouterModule.forChild(routes)\n                ],\n                exports: [RouterModule],\n                providers: [\n                    CardsManagementResolver,\n                    CardSecurityResolver\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CardManagementModule {\n}\nCardManagementModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CardManagementComponent,\n                    CardSecurityComponent\n                ],\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    SliderModule,\n                    CardModule,\n                    OptionListModule,\n                    IconModule,\n                    CardManagementRoutingModule,\n                    SlideToggleModule,\n                    LoaderModule\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CardManagementModule, CardManagementRoutingModule as ɵc, CardSecurityResolver as ɵe, CardsManagementResolver as ɵd, CardSecurityComponent as ɵb, CardManagementComponent as ɵa };\n\n//# sourceMappingURL=globile-card-management.js.map"],"sourceRoot":""}